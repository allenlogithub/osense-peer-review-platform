stages:
  - build
  - publish-fileserver
  - deploy

variables:
  PROJ_VERSION: v0.0.2
  TAG_LATEST: devops.oexpo.io/$PROJECT_NAME/$IMAGE_NAME:latest
  TAG_CURR: devops.oexpo.io/$PROJECT_NAME/$IMAGE_NAME:$PROJ_VERSION

build-flutter:
  image: cirrusci/flutter:3.0.0
  stage: build
  tags:
    - deployment
  before_script:
    - flutter pub get
  script:
    - flutter build web --dart-define=MAIN_SERVER_ADDRESS=$MAIN_SERVER_ADDRESS --dart-define=GOOGLE_SIGN_IN_CLIENT_ID=$GOOGLE_SIGN_IN_CLIENT_ID
    - cp -r build/web fileServer
  only:
    - main
  artifacts:
    paths:
      - build/web
      - fileServer

build-flutter-server:
  image: docker:stable
  stage: publish-fileserver
  tags:
    - deployment
  services:
    - name: docker:dind
      entrypoint: ["dockerd-entrypoint.sh"]
      command: ["--insecure-registry", "https://devops.oexpo.io"]
  script:
    - cd fileServer
    - docker build -t $TAG_CURR -t $TAG_LATEST --build-arg PROJ_NAME=$IMAGE_NAME .
    - docker login $HARBOR_SERVER -u $HARBOR_USERNAME -p $HARBOR_PASSWORD
    - docker push $TAG_CURR
    - docker push $TAG_LATEST
  only:
    - main
  artifacts:
    paths:
      - build/web
      - fileServer/srv.go

deploy:
  stage: deploy
  tags:
    - deployment
  script:
    - echo "$AWS_VM_CER" >> peerreview.crt
    - chmod 400 peerreview.crt
    - ssh -i peerreview.crt -o StrictHostKeyChecking=no $AWS_VM "rm -rf /home/ubuntu/peer-review-build/dev/*"
    - ssh -i peerreview.crt -o StrictHostKeyChecking=no $AWS_VM "ls -lhta /home/ubuntu/peer-review-build/dev/"
    - scp -r -i peerreview.crt -o StrictHostKeyChecking=no build/web/* $AWS_VM:/home/ubuntu/peer-review-build/dev/
